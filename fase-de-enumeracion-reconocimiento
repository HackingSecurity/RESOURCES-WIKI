
# Video 15 fase de reconocimiento inicial enumeracion de puertos con nmap

 Partimos en el segmento de red predeterminado (192.168.1.20), por ejemplo

route -n 

¿Que quermeos conseguir?

-> servicios expuestos, sistema operativos, puertos activos

Vale vale, pero y en orden como sería...

1) saber si nuestro host esta activo 

ping -c IP 

fijarnos en el ttl  (ya que nos ofrece información sobre el sistema operativo que puede estar corriendo el host)

https://subinsb.com/default-device-ttl-values/

para ver los saltos 

ping -c 1 IP -R

 
podemos crear nuestra estructura de carpetas

function mkt(){
    mkdir {nmap,content,scripts,tmp,exploits}
}

//-n -> que no me aplique resolucin dns
nmap IP -p- --open -T5 -v -n -oG allports 

# 16 pequeña utilidad de bash para el filtrado de puerto

#https://stackoverflow.com/questions/45850940/trouble-understanding-a-bash-command
#https://www.askapache.com/linux/zen-terminal-escape-codes/
#http://es.tldp.org/COMO-INSFLUG/COMOs/Bash-Prompt-Como/Bash-Prompt-Como-5.html
#https://www.shellhacks.com/bash-colors/
#https://gist.github.com/JBlond/2fea43a3049b38287e5e9cefc87b2124

#very interesting
#https://github.com/fidian/ansi

#character 27 = 033 = 0x1b = ^[ = \e

#\e introduce secuencia de control -> comienzo de código ANSI 
#m carácter al final de la secuencia -> "[" y "m" se interpreta ;
#0 desabilita todo el formato del texto anterior

#Colores: {} sustituye
#33 -> amarillo
#\e[0;{}m
#\e[0;33m


#\e[0m -> revertir los cambios a su valor predeterminado [reset]
#\033[1m  -> habilita la negrita
#\033 -> "ESC"
#\033[0m  -> restablece el formato
#\033[22m -> restablecer la negrita


#Hay que tener en cuenta que podemos implementar estas configuracion en cualquier shell que tenemos
# para comprobar nuestra shell -> "echo $SHELL " posteriormente modificamos el fichero correspondiente -> ~/.zshrc (en nuestro caso)

#Regular colors -> rc
endrc="\e[0m\e[0m"
blackrc="\e[0;30m\e[1m"
redrc="\e[0;31m\e[1m"
greenrc="\e[0;32m\e[1m"
yellowrc="\e[0;33m\e[1m"
bluerc="\e[0;34m\e[1m"
purplerc="\e[0;35m\e[1m"
cyanrc="\e[0;36m\e[1m"
whiterc="\e[0;37m\e[1m"

#Otra opcion:
#Regular colors -> rc
endrc="\033[0m\e[0m"
blackrc"\e[0;30m\033[1m"
redrc="\e[0;31m\033[1m"
greenrc="\e[0;32m\033[1m"
yellowrc="\e[0;33m\033[1m"
bluerc="\e[0;34m\033[1m"
purplerc="\e[0;35m\033[1m"
cyanrc="\e[0;36m\033[1m"
whiterc="\e[0;37m\033[1m"



#my funtions

#Extrae solo los puertos
function extractPorts(){
    echo -e "\n${bluerc}[*] Extracting information...${endrc}\n"
    ip_address=$(cat allPorts | grep -oP "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}" | sort -u)
    open_ports=$(cat allPorts | grep -oP "\d{1,6}/open" | awk '{print $1}' FS='/' | xargs | tr " " ",")
    echo -e "\t${cyanrc}[*] IP Address : ${endrc}${greenrc}$ip_address${endrc}"
    echo -e "\t${cyanrc}[*] Ports : ${endrc}${greenrc}$open_ports${endrc}\n"
    echo $open_ports | xclip -selection clipboard
    echo -e "${yellowrc} Ports has been copied to clipboard!${endrc}\n"
}

# video 17 deteccion de versionesy servicios con nmap

Vemos si esta activa nuestra maquina targe

ping -c 1 IP 

nmap -p- --open -T5 -v -n IP -oG allPorts

//Como hayamos llamado nuestro funcion en ~/.bashrc
extracport allPorts

nmap -sC -sV -v -p80 IP -oN targeted


//uso de el programa de whatweb

sudo apt install whatweb http://IP 2>/dev/null

whatweb http://IP 2>/dev/null

Uso de plugin  wappalizer para el reconocimiento de servicios web

cuando hayamos escaneado la máquina podemos ver su output 
cat targeted

# 18 tecnicas para agilizar nuestro escaneos con


ping -c 1 IP 

nmap -p- --open -T5 -v -n IP -oG allPorts 

//escanear los puertos mas importantes
nmap --top-ports 5000 --open -T5 -v -n IP -oG allPorts 

//sin arp (Pn)
nmap -sS --min-rate 5000 --open -v -n -Pn IP -oG -p- allPorts

nmap -sV -sC -p80 IP oN targeted

# 19. creacion de herramienta en bash para la deteccion de puertos TCP abiertos

Buscando una forma alternativa para ver si hay puertos abiertos, que no sea nmap que genera mucho tráfico
y ruido.

touch portScan.sh

uso de secuenciador

seq 1 10

//uso de /dev/tcp -> sockets

* https://www.linuxtotal.com.mx/index.php?cont=escanear-probar-puertos-abiertos
* https://aprenderlinux.org/5-formas-de-comprobar-si-un-puerto-esta-abierto-en-una-pc-linux-remota/



// grep -w 53 /etc/services

#!/bin/bash

#objetivo del scritp sería.
#necesitamos recorrer los 65535 puertos que hay 2^16

if [ $1 ]; then
    #Primer argumento
    ip_address=$1
    for port in $(seq 1 65535); do 
        #timeout 1 bash -c "echo '' > /dev/tcp/147.96.4.38/22" 2>/dev/null && echo "[*] Port x - Open"
        timeout 1 bash -c "echo '' > /dev/tcp/$ip_address/$port" 2>/dev/null && echo "[*] Port $port - Open" &
        
        #bash -c "echo '' > /dev/tcp/$ip_address/$port" 2>/dev/null && echo "[*] Port $port - Open" &
    done; wait
else

    #Informamos de errores 
    echo -e "\n[*] Uso: ./portScan.sh <ip-address>\n"
    exit 1
fi


# 20. creacion de herramienta en bash para el descubrimiento de equipos en la red


#!/bin/bash

#for host in (seq 2 254); do
#    timeout 1 bash -c "ping -c 1 147.96.4.$host > /dev/null 2>&1" && echo "Host 174.96.4.$1 - ACTIVE "  &
#done; wait


for host in (seq 15 30); do
    timeout 1 bash -c "ping -c 1 147.96.4.$host > /dev/null 2>&1" && echo "Host 174.96.4.$1 - ACTIVE "  &
done; wait


¿y si no está habilitado IMCP? que podriamos usar para descurbrir equipos/hosts


# 21. reconocimiento a traves de los scripts que incorpora nmap por categoria

nmap -sS --open -n -Pn -vvv -p- IP  -oG allPorts

//Conocer donde estan los script de nmap

nmap -sC -sV -p80 IP -oN targeted 

updatedb -> actualizar los archivo existentes en el sistema
locate -> comando que nos permite buscar sobre ficheros en el sistema

locate .nse -> los ficheros que nos interesa buscar para conocer que hace nmap 
locate .nse | wc -l 


Conocer las categorias de nmap

locate .nse | xargs grep "categories"
